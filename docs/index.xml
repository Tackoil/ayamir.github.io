<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Ayamir&#39;s Blog</title>
        <link>https://ayamir.github.io/</link>
        <description>Welcome to Ayamir&#39;s blog.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miracle_l@bupt.edu.cn (Ayamir)</managingEditor>
            <webMaster>miracle_l@bupt.edu.cn (Ayamir)</webMaster><lastBuildDate>Sun, 20 Mar 2022 22:09:11 &#43;0800</lastBuildDate>
            <atom:link href="https://ayamir.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Note for DQB</title>
    <link>https://ayamir.github.io/posts/note-for-dqb/</link>
    <pubDate>Sun, 20 Mar 2022 22:09:11 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-dqb/</guid>
    <description><![CDATA[<h1 id="整体概况">整体概况</h1>
<p>Link：<a href="https://ieeexplore.ieee.org/document/9317771" target="_blank" rel="noopener noreffer">Modeling the Perceptual Quality for Viewport-Adaptive Omnidirectional Video Streaming Considering Dynamic Quality Boundary Artifact</a>
Level：IEEE TCSVT 2021</p>
<p>DQB: Dynamic Quality Boundary，指在基于分块的 FoV 自适应全景视频推流过程中低质量分块区域的暴露和质量切换现象。</p>
<p>DQB 现象实际上就是 FoV 内分块间的质量差异和随时间变化的分块质量变化。
这篇论文主要的贡献在于深入研究了这种现象，并且针对此提出了可以利用现存的 QoE 评估指标的模型，并且可以实际应用。</p>
<h1 id="model-的建立">Model 的建立</h1>
<ol>
<li>执行一系列主观评估，由低质量分块的比例和质量导致的感知质量的降低可以基于主观实验结果完成建模。</li>
<li>结合剩下分块的感知质量可以完成单帧质量模型的建模。</li>
<li>最后将一段时间内的所有帧的感知质量池化，就完成了整个的模型。</li>
</ol>
<h2 id="主观实验的设定">主观实验的设定</h2>
<ol>
<li>获得 FoV 内帧的感知质量（低质量分块和高质量分块同时存在）</li>
<li>获取整个视频的感知质量（与上面的实验过程相近，只是过程中没有暂停）</li>
<li>获取整个视频的感知质量（没有引入 DQB，所有分块质量相同）</li>
</ol>
<p>实验结果</p>
<p></p>
<h2 id="帧质量感知模型">帧质量感知模型</h2>
<p>从上面的实验结果可以看出来高质量区域与低质量区域的质量差距 $d_n$ 越大，DQB 效应越显著（符合直觉）。将这部分影响因素看作是感知质量的主要影响因素：</p>
<p>$$
d_n = Q_{H, n} - Q_{L, n}
$$</p>
<p>$Q_{H, n}$ 和 $Q_{L, n}$ 分别表示第 $n$个 帧高质量分块和低质量分块的感知质量。
这两个质量从主观实验 3 的主观质量获得，在之后的训练过程中可以被客观质量评估的结果所替换。</p>
<p>为了调查质量差异 $d_n$ 和感知质量降低 $D_n$ 之间的关系，通过使用实验 1 的帧质量分数计算得出第$n$个帧的感知质量降低：</p>
<p>$$
D_n = Q_{H, n} - Q_{HL, n}
$$</p>
<p>$Q_{HL, n}$是实验 1 中评分得到的第$n$个帧的 FoV 内感知质量。</p>
<p>在 6 个视频上的实验结果如下图：</p>
<p></p>
<p>可以看到二者的关系可以近似为线性相关，即：</p>
<p>$$
D_n = k_1 d_n
$$</p>
<p>$k_1$ 作为线性回归的参数，可以计算出来。</p>
<p>但是对于不同取值的 $p_n$ ， $k_1$ 的取值也相当不同，两者之间的关系可以见下图：</p>
<p></p>
<p>数学表示可以建模为：</p>
<p>$$
k_1 = a_1 \cdot ln(a_2 \cdot p_n + a_3) \cdot sgn(p_n - P)
$$</p>
<p>$sgn$ 是符号函数，$a_1, a_2, a_3$ 可以从回归中计算出来， $P$ 表示低质量分块的比例。按照图中的回归结果，$P = 0.118$ 时，用户几乎没办法注意到低质量区域的存在。</p>
<p>最终，由低质量区域暴露引起的感知质量降低 $D_n$ 可以计算为：</p>
<p>$$
D_n = a_1 \cdot ln(a_2 \cdot p_n + a_3) \cdot (Q_{H, n} - Q_{L, n}) \cdot sgn(p_n - P)
$$</p>
<p>那么实际的感知质量 $Q_n$ 可以计算为：</p>
<p>$$
Q_n = Q_{H, n} - D_n
$$</p>
<h2 id="时间池化">时间池化</h2>
<p>可以采用下面两种方式之一完成</p>
<h3 id="exp-minkowski-basedhttpsieeexploreieeeorgdocument6603210"><a href="https://ieeexplore.ieee.org/document/6603210" target="_blank" rel="noopener noreffer"><code>Exp Minkowski-Based</code></a></h3>
<p>单个帧的感知质量由衰减指数加权，衰减指数表示在主观评估中观察到的<a href="https://www.spiedigitallibrary.org/conference-proceedings-of-spie/3299/1/Viewer-response-to-time-varying-video-quality/10.1117/12.320109.short?SSO=1" target="_blank" rel="noopener noreffer">近因效应</a>。</p>
<p>最终整个视频的感知质量 $PQ$ 可以计算为：</p>
<p>$$
PQ = \Big[\frac{1}{N} \sum_{n=1}^{N} exp\big( \frac{n-N}{\delta} \big) \cdot {Q_n}^p \Big]^{1/p}
$$</p>
<p>$N$ 是整个视频的帧数。</p>
<p>$p$ 是 <code>Minkowski</code>指数，高 $p$ 值强调了最高质量帧的影响。</p>
<p>$\delta$ 是控制近因效应强度的指数时间常数，以帧的数量的形式给出，高 $\delta$ 值对应较弱的近因效应。</p>
<p>$p$ 和 $\delta$ 的值可以通过对主观帧质量和视频序列的整体质量进行回归得到。</p>
<h3 id="quality-contribution-basedhttpsieeexploreieeeorgdocument6235989"><a href="https://ieeexplore.ieee.org/document/6235989" target="_blank" rel="noopener noreffer"><code>Quality Contribution-Based</code></a></h3>
<p>之前的研究表明，传统视频在时间维度上的感知质量降低主要与每帧的显示时长相关。</p>
<p>FoV 自适应的全景视频也与之类似，感知质量与降低质量帧和高质量帧的持续时间相关。因此采用<code>Quality Contribution</code>的概念来描述每帧对视频感知质量的影响（考虑每帧的空间感知质量和显示时长）。</p>
<p>时间池化是由相应的显示时长加权的每帧的质量贡献的函数，特别的，质量贡献是从 MOS 和显示持续时间之间初步找到的对数关系所导出的：</p>
<p>$$
C_n = Q_n \cdot (p_1 + p_2 \cdot log(T))
$$</p>
<p>$C_n$ 是第 $n$ 帧的贡献， $T$ 是每帧的显示时长， $T = Max(T, 33.3ms)$，即当帧率不低于 30fps 时，时间不连续性可以忽略。</p>
<p>接着，二级时间池化法用于池化单帧的分布。这种方法将 FoV 内的帧以注视水平划分为短时帧组(GoFs)，并以 GoF 的质量作为长期时间池化的基本单位来评估感知质量。</p>
<p>给出每帧的质量贡献之后，每个 GoF 的质量可以计算为</p>
<p>$$
Q_{GoF} = \frac{\sum_{n \in N} \big( C(n) \cdot T(n) \big)}{\sum_{n \in N} T(n)}
$$</p>
<p>接下来组合 GoF 的质量得到长期时间池化，即可以获得感知质量。</p>
<p>质量严重受损的帧会影响相邻帧的感知质量，视频中质量最差的部分主要决定整个视频的感知质量。因此提出选择计算出的质量低于平均值 75%的 GoF，以此计算平均质量并作为整个视频的感知质量。</p>
]]></description>
</item>
<item>
    <title>Note for Toward Immersive Experience</title>
    <link>https://ayamir.github.io/posts/note-for-toward-immersive-experience/</link>
    <pubDate>Wed, 09 Mar 2022 11:20:37 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-toward-immersive-experience/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p>Link: <a href="https://ieeexplore.ieee.org/document/9679801" target="_blank" rel="noopener noreffer">Toward Immersive Experience: Evaluation for Interactive Network Services</a></p>
<p>Level: IEEE Network 2022</p>
<p>Keywords: QoE Metrics</p>
<h1 id="background">Background</h1>
<p>Compared with traditional QoE for regular video/audio services, the existing work on IE is still in its infancy. This work aims at providing systematic and comprehensive research on IE for interactive network services, mainly studying the following three fundamental and challenging issues.</p>
<ul>
<li><em>What is the essential difference between IE and traditional QoE?</em></li>
<li><em>Which categories of factors mainly influence IE?</em></li>
<li><em>How to evaluate IE in an efficient and intelligent manner?</em></li>
</ul>
<h1 id="ie-versus-traditional-qoe">IE versus traditional QoE</h1>
<h2 id="theoretical-definitions">Theoretical definitions</h2>
<p>Existing concepts of IE can be classified into two categories.</p>
<ul>
<li>The subjective sense of being surrounded or experiencing multi-sensory stimulation when interacting with the virtual environment.</li>
<li>The user&rsquo;s psychological state of deep involvement, engagement, absorption, or engrossment.</li>
</ul>
<p>Traditional QoE:</p>
<ul>
<li>A subjective measure from the user perspective of the overall value of the provided service and application.</li>
</ul>
<p>We can summary two significant points as follows to distinguish IE and traditional QoE:</p>
<ul>
<li>Both IE and traditional QoE are devoted to characterizing user&rsquo;s subjective experience for network services.</li>
<li>In terms of application scenarios, IE concentrates on the evaluation of network services equipped with interactive characteristics while traditional QoE is generally appropriate for regular audio/video services.</li>
</ul>
<p>IE is much more complex, fine-grained and multi-dimensional perception, which is produced through the interplay between multi-sensory data and diverse cognitive processes.</p>
<h2 id="technical-challenges">Technical challenges</h2>
<ul>
<li>Growing data volume</li>
<li>Stricter delay constraint</li>
<li>Increasing data dimension</li>
</ul>
<h2 id="ifs-on-ie">IFs on IE</h2>
<p></p>
<h2 id="network-aware-ifs">Network-aware IFs</h2>
<p>Actually, when heterogeneous streams are delivered to the network, their transmission quality is dependent on the outside network conditions(e.g., delay, jitter, throughput, and so on), as well as the streaming strategy (e.g., encoding, transmission protocol, and so on) inside streams, which ultimately impact end users&rsquo; IE. To this end, we can further subdivide this category into two classes including network QoS and stream-related IFs.</p>
<ul>
<li>
<p>QoS:</p>
<ul>
<li>low latency</li>
<li>high throughput</li>
<li>high reliability</li>
<li>temporal synchronization among heterogeneous streams</li>
</ul>
</li>
<li>
<p>stream-related IFs</p>
<ul>
<li>the form of data compression strategy</li>
<li>resource scheduling scheme</li>
</ul>
</li>
</ul>
<h2 id="user-aware-ifs">User-aware IFs</h2>
<p>IE may be influenced by human users while human users can perceive IE, for which we can subdivide this category into three classes based on such correlations.</p>
<ul>
<li>User profile</li>
<li>Physiological IFs</li>
<li>Psychological IFs</li>
</ul>
<p>It is obvious that users with diverse user profiles have distinctive influences on IE.</p>
<p>The psychology and physiology of users can highly reflect the IE for the application.</p>
<ul>
<li>For psychological IFs, they are able to directly demonstrate a user&rsquo;s positive or negative feedback for interactive network services. However, this can hardly be simply measured.</li>
<li>For physiological IFs, some of them(e.g., heart rate, blood pressure) can be objectively measured by affordable medical sensors.</li>
</ul>
<h2 id="device-aware-ifs">Device-aware IFs</h2>
<p>With regard to device-aware IFs, two broad classes can be gotten according to internal systems(e.g., CPU) and external specifications(e.g., screen size, FOV) of the device.</p>
<p>IE management in the device level mainly lies in two aspects.</p>
<ul>
<li>The selection of terminal type(e.g., mobile phone, laptop, VR/AR glasses)</li>
<li>The corresponding possession of hardware(e.g., CPU, GPU, battery).</li>
</ul>
<h2 id="context-aware-ifs">Context-aware IFs</h2>
<p>Typically, IE for interactive network services is generated by interacting with the virtual environment. To this end, we can derive two primary classes.</p>
<ul>
<li>Virtual context: focuses on the specific virtual application scenario.</li>
<li>Physical context: focuses on its surrounding physical environment.</li>
</ul>
<p>We can provide constructive suggestions for different contexts. For example, online virtual games are  appropriate to play outside for the broad horizon, but watching a 3D film is more proper inside the home.</p>
<p>We can suggest appropriate application types with different technical requirement to guarantee users&rsquo; IE according to existing network resources and the surrounding environment.</p>
<p></p>
<h1 id="light-weight-ie-evaluation">Light-weight IE evaluation</h1>
<p>We proposed two light-weight IE evaluation approaches by respectively exploiting the AI technology and exploring the mathematical relationship among IFs and IE, which are appropriate for different cases according to the data amount.</p>
<h2 id="ai-based">AI-based</h2>
<p>Existing popular studies focusing on DL-based models(e.g., DNNs, LSTMs) can hardly satisfy the stringent delay requirement.</p>
<p>We employ a multi-view learning combining with lightweight ML methods(e.g., SVM, decision tree) for fast and accurate IE evaluation.</p>
<p></p>
<p>The raw data through multi-view learning is first represented by multiple feature extractors according to their heterogeneous properties. Each modality is regraded as a particular view for multi-modal applications. Motivations are:</p>
<ol>
<li>It can provide efficient dimension reduction via subspace mapping. Subspace learning-based approaches can map the high-dimensional raw data to a latent subspace, in which its dimensionality is lower than that of raw data.</li>
<li>Multi-view learning is more applicable to the IE context with abundant infomation, which can overcome the weakness of ML-based methods regarding evaluation accuracy for interactive network services.</li>
<li>Multi-view learning can take full advantage of the associated and complementary features from redundant views for evaluation performance improvement.</li>
</ol>
<h2 id="statistical-function-based">Statistical function-based</h2>
<p>AI-based approach may achieve better evaluation performances under large amounts of data, they lack strong interpretability and cannot explicitly explain the inherent relations among IFs and IE.</p>
<p>We introduced statistical function-based approach to analyze the mathematical relationship among IFs and IF under limited data.</p>
<p>Existing statistical function-based approaches for user experience evaluation are broadly divided into three categories:</p>
<ul>
<li>Exponential model</li>
<li>Logarithmic model</li>
<li>Linear regression model</li>
</ul>
<p>Notably, in order to further improve evaluation performance for interactive network services via statistical function-based approaches, two fundamental and significant issues need to be concerned as follows:</p>
<ol>
<li>How to comprehensively explore diverse and various IFs for accurate IE evaluation?</li>
<li>How to conduct an efficient dimension reduction method for fast IE evaluation?</li>
</ol>
<h1 id="case-study">Case study</h1>
<h2 id="multi-view-generation">Multi-view generation</h2>
<p>We can construct multiple views from expert prior knowledge or via the random subspace method, which is a random sampling algorithm for automatic feature set partitioning. Here we partition multi-modal data into three specific views according to different modalites.(e.g., audio, video, and haptic signals).</p>
<h2 id="view-combination">View combination</h2>
<p>Then we adopt subspace learning-based approaches to obtain an appropriate subspace from the above-mentioned multiple views. Importantly, canonical correlation analysis in subspace learning plays a significant role in dimension reduction, and outputs the optimal projection for each view.</p>
<h3 id="ie-evaluation">IE evaluation</h3>
<p>Finally, based on the optimal and combined projection subspace, decision tree is deployed here to evaluation IE.</p>
<p>The key point is find a general and robust evaluation approach:
$$
f: X \rarr Y
$$
Result is:
$$
Y = X^{\top} {\beta} + {\epsilon}
$$
${\epsilon}$ is the noise, ${\beta}$ can be considered as influencing degree of various IFs to the IE.</p>
<p>IE evaluation for multi-modal applications must satisfy more stringent delay requirements in the context of higher-dimensional data. So we apply the <a href="https://www.doi.org/10.1080/10618600.1998.10474784" target="_blank" rel="noopener noreffer">LASSO estimation</a>, which is equipped with sparse solutions for the linear regression model, is incorporated to alleviate the issue of high-dimensional data for fast IE evaluation.</p>
<p>Dataset: <a href="http://8.133.175.194/" target="_blank" rel="noopener noreffer">VisTouch</a></p>
<p>Compare obejcts:</p>
<ul>
<li>Ridge regression</li>
<li>Exponential model</li>
</ul>
<p>Performance metric: MAE</p>
<p>Test result:</p>
<p></p>
]]></description>
</item>
<item>
    <title>Note for MLflow</title>
    <link>https://ayamir.github.io/posts/note-for-mlflow/</link>
    <pubDate>Mon, 07 Mar 2022 19:25:46 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-mlflow/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p><code>MLflow</code>是一个用于管理机器学习全生命周期的框架。</p>
<p>其主要的作用是：</p>
<ul>
<li>完成训练和测试过程中不同超参数的结果的记录、对比和可视化——<code>MLflow Tracking</code></li>
<li>以一种可复现重用的方式包装ML代码——<code>MLflow Projects</code></li>
<li>简化模型部署的难度——<code>MLflow Models</code></li>
<li>提供中心化的模型存储来管理全生命周期——<code>MLflow Model Registry</code></li>
</ul>
<p>现在主要用到的是第三个，所以先记录<code>Models</code>的用法</p>
<h1 id="mlflow-models">MLflow Models</h1>
<p><code>MLflow Models</code>本质上是一种格式，用来将机器学习模型包装好之后为下游的工具所用。</p>
<p>这种格式定义了一种惯例来让我们以不同的<code>flavor</code>保存模型进而可以被下游工具所理解。</p>
<h2 id="存储格式">存储格式</h2>
<p>每个<code>MLflow Model</code>是一个包含任意文件的目录，根目录之下有一个<code>MLmodel</code>文件，用于定义多个<code>flavor</code>。</p>
<p><code>flavor</code>是<code>MLflow Model</code>的关键概念，抽象上是部署工具可以用来理解模型的一种约定。</p>
<p><code>MLflow</code>定义了其所有内置部署工具都支持的几种标准<code>flavor</code>，比如描述如何将模型作为<code>Python</code>函数运行的<code>python_function</code> <code>flavor</code>。</p>
<p>目录结构示例如下：</p>
<p></p>
<p><code>MLmode</code>文件内容示例如下：</p>
<p></p>
<p>这个模型可以用于任何支持<code>pytorch</code>或<code>python_function</code> <code>flavor</code>的工具，例如可以使用如下的命令用<code>python_function</code>来serve一个有<code>python_function</code> <code>flavor</code>的模型：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mlflow models serve -m my_model
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="model-signature">Model Signature</h2>
<p>模型的输入输出要么是<code>column-based</code>，要么是<code>tensor-based</code>。</p>
<ul>
<li><code>column-based</code> inputs and outputs can be described as a sequence of (optionally) named columns with type specified as one of the <code>MLflow data type</code>.</li>
<li><code>tensor-based</code> inputs and outputs can be described as a sequence of (optionally) named tensors with type specified as one of the <code>numpy data type</code>.</li>
</ul>
<h3 id="signature-enforcement">Signature Enforcement</h3>
<p>Schema enforcement checks the provided input against the model&rsquo;s signature and raises an exception if the input is not compatible. It only works when using <code>MLflow model</code> deployment tools or loading models as <code>python_function</code>. It has no impact on native model.</p>
<h4 id="name-ordering-enforcement">Name Ordering Enforcement</h4>
<p>The input names are checked against the model signature. If there are any missing inputs, <code>MLflow</code> will raise an exception. Extra inputs will be ignored. Prioritized method is matching by name if provided in input schema, then according to position.</p>
<h4 id="input-type-enforcement">Input Type Enforcement</h4>
<p>For <code>column-based</code> signatures, <code>MLflow</code> will perform safe type conversions if necessary. Only lossless conversions are allowed.</p>
<p>For <code>tensor-based</code> signatures, type checking is strict(any dismatch will throw an exception).</p>
<h4 id="handling-integers-with-missing-values">Handling Integers With Missing Values</h4>
<p>Integer data with missing values is typically represented as floats in <code>Python</code>.</p>
<p>Best way is to declare integer columns as doubles whenever there can be missing values.</p>
<h4 id="handling-data-and-timestamp">Handling Data and Timestamp</h4>
<p><code>Python</code> has precision built into the type for datatime values.</p>
<p>Datetime precision is ignored for <code>column-based</code> model signature but is enforced for <code>tensor-based</code> signatures.</p>
<h3 id="log-models-with-signatures">Log Models with Signatures</h3>
<p>Pass signature object as an argument to the appropriate log_model call to include a signature with model. The model signature object can be created by hand or inferred from datasets with valid model inputs and valid model outputs.</p>
<h4 id="column-based-example"><code>Column-based</code> example</h4>
<p>The following example demonstrates how to store a model signature for a simple classifier trained on the <code>Iris</code> dataset:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">datasets</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mlflow</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mlflow.sklearn</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.models.signature</span> <span class="kn">import</span> <span class="n">infer_signature</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">iris</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">load_iris</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">iris_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">iris</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">iris</span><span class="o">.</span><span class="n">feature_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">clf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">max_depth</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">iris_train</span><span class="p">,</span> <span class="n">iris</span><span class="o">.</span><span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">infer_signature</span><span class="p">(</span><span class="n">iris_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">iris_train</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">mlflow</span><span class="o">.</span><span class="n">sklearn</span><span class="o">.</span><span class="n">log_model</span><span class="p">(</span><span class="n">clf</span><span class="p">,</span> <span class="s2">&#34;iris_rf&#34;</span><span class="p">,</span> <span class="n">signature</span><span class="o">=</span><span class="n">signature</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The same signature can be created explicitly as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.models.signature</span> <span class="kn">import</span> <span class="n">ModelSignature</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.types.schema</span> <span class="kn">import</span> <span class="n">Schema</span><span class="p">,</span> <span class="n">ColSpec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">input_schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="n">ColSpec</span><span class="p">(</span><span class="s2">&#34;double&#34;</span><span class="p">,</span> <span class="s2">&#34;sepal length (cm)&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="n">ColSpec</span><span class="p">(</span><span class="s2">&#34;double&#34;</span><span class="p">,</span> <span class="s2">&#34;sepal width (cm)&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="n">ColSpec</span><span class="p">(</span><span class="s2">&#34;double&#34;</span><span class="p">,</span> <span class="s2">&#34;petal length (cm)&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="n">ColSpec</span><span class="p">(</span><span class="s2">&#34;double&#34;</span><span class="p">,</span> <span class="s2">&#34;petal width (cm)&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">output_schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="p">([</span><span class="n">ColSpec</span><span class="p">(</span><span class="s2">&#34;long&#34;</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">ModelSignature</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="n">input_schema</span><span class="p">,</span> <span class="n">outputs</span><span class="o">=</span><span class="n">output_schema</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="tensor-based-example"><code>Tensor-based</code> example</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">keras.datasets</span> <span class="kn">import</span> <span class="n">mnist</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">keras.utils</span> <span class="kn">import</span> <span class="n">to_categorical</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Flatten</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">SGD</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mlflow</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mlflow.keras</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.models.signature</span> <span class="kn">import</span> <span class="n">infer_signature</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">train_X</span><span class="p">,</span> <span class="n">train_Y</span><span class="p">),</span> <span class="p">(</span><span class="n">test_X</span><span class="p">,</span> <span class="n">test_Y</span><span class="p">)</span> <span class="o">=</span> <span class="n">mnist</span><span class="o">.</span><span class="n">load_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">trainX</span> <span class="o">=</span> <span class="n">train_X</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">train_X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">testX</span> <span class="o">=</span> <span class="n">test_X</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">test_X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">trainY</span> <span class="o">=</span> <span class="n">to_categorical</span><span class="p">(</span><span class="n">train_Y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">testY</span> <span class="o">=</span> <span class="n">to_categorical</span><span class="p">(</span><span class="n">test_Y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">,</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s1">&#39;he_uniform&#39;</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Flatten</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">,</span> <span class="n">kernel_initializer</span><span class="o">=</span><span class="s1">&#39;he_uniform&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;softmax&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">opt</span> <span class="o">=</span> <span class="n">SGD</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">opt</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s1">&#39;categorical_crossentropy&#39;</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;accuracy&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">trainX</span><span class="p">,</span> <span class="n">trainY</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">testX</span><span class="p">,</span> <span class="n">testY</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">infer_signature</span><span class="p">(</span><span class="n">testX</span><span class="p">,</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">testX</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">mlflow</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">log_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="s2">&#34;mnist_cnn&#34;</span><span class="p">,</span> <span class="n">signature</span><span class="o">=</span><span class="n">signature</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The same signature can be created explicitly as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.models.signature</span> <span class="kn">import</span> <span class="n">ModelSignature</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mlflow.types.schema</span> <span class="kn">import</span> <span class="n">Schema</span><span class="p">,</span> <span class="n">TensorSpec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">input_schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">  <span class="n">TensorSpec</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dtype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">output_schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="p">([</span><span class="n">TensorSpec</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dtype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">))])</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">ModelSignature</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="n">input_schema</span><span class="p">,</span> <span class="n">outputs</span><span class="o">=</span><span class="n">output_schema</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="model-input-example">Model Input Example</h2>
<p>Model inputs can be <code>column-based</code> (i.e <code>DataFrame</code>) or <code>tensor-based</code> (i.e <code>numpy.ndarrays</code>).</p>
<p>A model input example provides an instance of a valid model input which can be stored as separate artifact and is referenced in the <code>MLmodel</code> file.</p>
<h3 id="log-model-with-column-based-example">Log Model with <code>column-based</code> example</h3>
<p>An example can be a single record or a batch of records. The sample input can be passed in as a Pandas <code>DataFrame</code>, <code>list</code> or <code>dict</code>. The given example will be converted to a Pandas <code>DataFrame</code> and then serialized to json using the Pandas split-oriented format.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">input_example</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;sepal length (cm)&#34;</span><span class="p">:</span> <span class="mf">5.1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;sepal width (cm)&#34;</span><span class="p">:</span> <span class="mf">3.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;petal length (cm)&#34;</span><span class="p">:</span> <span class="mf">1.4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;petal width (cm)&#34;</span><span class="p">:</span> <span class="mf">0.2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">mlflow</span><span class="o">.</span><span class="n">sklearn</span><span class="o">.</span><span class="n">log_model</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="n">input_example</span><span class="o">=</span><span class="n">input_example</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="log-model-with-tensor-based-example">Log Model with <code>Tensor-based</code> example</h3>
<p>An example must be a batch of inputs. The axis 0 is the batch axis by default unless specified otherwise in the model signature. The sample input can be passed in as a numpy <code>ndarray</code> or a <code>dict</code> mapping a string to a numpy <code>array</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># each input has shape (4, 4)</span>
</span></span><span class="line"><span class="cl"><span class="n">input_example</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">   <span class="p">[[</span>  <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>  <span class="mi">0</span><span class="p">,</span> <span class="mi">134</span><span class="p">,</span>  <span class="mi">25</span><span class="p">,</span>  <span class="mi">56</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="mi">253</span><span class="p">,</span> <span class="mi">242</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span>   <span class="mi">6</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">93</span><span class="p">,</span>  <span class="mi">82</span><span class="p">,</span>  <span class="mi">82</span><span class="p">]],</span>
</span></span><span class="line"><span class="cl">   <span class="p">[[</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">23</span><span class="p">,</span>  <span class="mi">46</span><span class="p">,</span>   <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">13</span><span class="p">,</span>  <span class="mi">36</span><span class="p">,</span> <span class="mi">166</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="mi">76</span><span class="p">,</span>  <span class="mi">75</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">44</span><span class="p">,</span>  <span class="mi">11</span><span class="p">,</span>  <span class="mi">82</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mlflow</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">log_model</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="n">input_example</span><span class="o">=</span><span class="n">input_example</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="model-api">Model API</h2>
<p><code>MLflow</code> includes integrations with several common libraries. For example, <code>mlflow.sklearn</code> contains <code>save_model</code>, <code>log_model</code>, and <code>load_model</code> functions for <code>scikit-learn</code> models.</p>
<p>Additionally, we can use <code>mlflow.models.Model</code> class to create and write models which has 4 key functions:</p>
<ul>
<li><code>add_flavor</code> to add a flavor to the model. Each <code>flavor</code> has a <code>string</code> name and a <code>dict</code> of key-value attributes, where the values can be any object that can be serialized to YAML.</li>
<li><code>save</code> to save the model to a local directory.</li>
<li><code>log</code> to log the model as an artifact in the current run using <code>MLflow tracking</code>.</li>
<li><code>load</code> to load a model from a local directory or from an artifact in a previous run.</li>
</ul>
<h3 id="pytorch">Pytorch</h3>
<p><code>mlflow.pytorch</code> module defines utilities for saving and loading <code>MLflow Models</code> with the <code>pytorch</code> flavor.</p>
<p>We can use <code>mlflow.pytorch.save_model()</code> and <code>mlflow.pytorch.log_model()</code> methods to save <code>pytorch</code> models in <code>MLflow</code> format.</p>
<p>We can use <code>mlflow.pytorch.load_mode()</code> to load <code>MLflow Models</code> with <code>pytorch</code> flavor as <code>pytorch</code> model objects. This loaded <code>PyFunc</code> model can be scored with both <code>DataFrame</code> input and numpy <code>array</code> input.</p>
]]></description>
</item>
<item>
    <title>WebGL Samples Explanation</title>
    <link>https://ayamir.github.io/posts/webgl-samples-explanation/</link>
    <pubDate>Thu, 03 Mar 2022 10:31:38 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/webgl-samples-explanation/</guid>
    <description><![CDATA[<h1 id="context">Context</h1>
<ol>
<li>Create an <code>HTML5</code> canvas</li>
<li>Get the canvas id</li>
<li>Obtain <code>WebGL</code> Context</li>
</ol>
<p>The parameter <code>WebGLContextAttributes</code> is not mandatory.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Attributes</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>alpha</code></td>
<td style="text-align:center">true: provide an alpha buffer to the canvas;</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center"><code>depth</code></td>
<td style="text-align:center">true: drawing buffer contains a depth buffer of at least 16 bits;</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center"><code>stencil</code></td>
<td style="text-align:center">true: drawing buffer contains a stencil buffer of at least 8 bits;</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center"><code>antialias</code></td>
<td style="text-align:center">true: drawing buffer performs anti-aliasing</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center"><code>premultipliedAlpha</code></td>
<td style="text-align:center">true: drawing buffer contains colors with pre-multiplied alpha</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center"><code>preserveDrawingBuffer</code></td>
<td style="text-align:center">true: buffers will not be cleared and will preserve their values until cleared or overwritten by the author</td>
<td style="text-align:center">false</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;my_canvas&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&#34;webgl&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">antialias</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">stencil</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="geometry">Geometry</h1>
<h2 id="definition">Definition</h2>
<p>A 2D or 3D model drawn using vertices is call a <code>mesh</code>.</p>
<p>Each facet in a mesh is called a polygon and a polygon is made of 3 or more vertices.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// create a 2D triangle which lies on the coordinates {(-5, -5), (5, -5), (5, 5)}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span>   <span class="c1">// Vertex 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span>   <span class="c1">// Vertex 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span>    <span class="c1">// Vertex 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>Similarly, we can create an array for the indices follow the sequence.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">indices</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>drawArrays()</code>: pass the vertices of the primitive using JavaScript arrays.</li>
<li><code>drawElements()</code>: pass both vertices and indices of the primitive using JavaScript arrays.</li>
</ul>
<h2 id="buffer-objects">Buffer Objects</h2>
<p>A buffer object indicates a memory area allocated in GPU.</p>
<p>We can store data of the models corresponding to vertices, indices, color and etc.</p>
<p>There are 2 types of buffer objects:</p>
<ul>
<li>Vertex Buffer Object(VBO): It holds the per-vertex data of the graphical model that is going to be rendered.</li>
<li>Index Buffer Object(IBO): It holds the indices of the graphical model that is going to be rendered.</li>
</ul>
<p>After defining the required geometry and storing them in JavaScript arrays, we need to pass these arrays to the buffer objects, from where the data will be passed to the shader programs.</p>
<ol>
<li>
<p>Create an empty buffer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertex_buffer</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">index_buffer</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Bind an appropriate array object to the empty buffer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">void</span> <span class="nx">bindBuffer</span><span class="p">(</span><span class="kr">enum</span> <span class="nx">target</span><span class="p">,</span> <span class="nb">Object</span> <span class="nx">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ARRAY_BUFFER represents vertex data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span> <span class="nx">vertex_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ELEMENT_ARRAY_BUFFER represent index data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span> <span class="nx">index_buffer</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Pass the data (vertices/indices) to the buffer using one of the typed arrays.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">void</span> <span class="nx">bufferData</span><span class="p">(</span><span class="kr">enum</span> <span class="nx">target</span><span class="p">,</span> <span class="nb">Object</span> <span class="nx">data</span><span class="p">,</span> <span class="kr">enum</span> <span class="nx">usage</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Usage specifies how to use the buffer object data to draw shapes
</span></span></span><span class="line"><span class="cl"><span class="c1">// gl.STATIC_DRAW -- Data will be specified once and used many times.
</span></span></span><span class="line"><span class="cl"><span class="c1">// gl.STREAM_DRAW -- Data will be specified once and used a few times.
</span></span></span><span class="line"><span class="cl"><span class="c1">// gl.DYNAMIC_DRAW -- Data will be specified repeatedly and used many times.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// vertex buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">gl</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">vertices</span><span class="p">),</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// index buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">gl</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="nx">indices</span><span class="p">),</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Unbind the buffer (Optional/Recommended).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h1 id="shader">Shader</h1>
<p>Shaders are written in ES SL which has variables of its own data types, qualifiers, built-in inputs and outputs.</p>
<h2 id="data-types">Data Types</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>void</code></td>
<td style="text-align:center">empty value</td>
</tr>
<tr>
<td style="text-align:center"><code>bool</code></td>
<td style="text-align:center">true or false</td>
</tr>
<tr>
<td style="text-align:center"><code>int</code></td>
<td style="text-align:center">signed integer</td>
</tr>
<tr>
<td style="text-align:center"><code>float</code></td>
<td style="text-align:center">floating scalar</td>
</tr>
<tr>
<td style="text-align:center"><code>vec2</code>, <code>vec3</code>, <code>vec4</code></td>
<td style="text-align:center">n-component floating point vector</td>
</tr>
<tr>
<td style="text-align:center"><code>bvec2</code>, <code>bvec3</code>, <code>bvec4</code></td>
<td style="text-align:center">boolean vector</td>
</tr>
<tr>
<td style="text-align:center"><code>ivec2</code>, <code>ivec3</code>, <code>ivec4</code></td>
<td style="text-align:center">signed integer vector</td>
</tr>
<tr>
<td style="text-align:center"><code>mat2</code>, <code>mat3</code>, <code>mat4</code></td>
<td style="text-align:center">2x2, 3x3, 4x4 float matrix</td>
</tr>
<tr>
<td style="text-align:center"><code>sampler2D</code></td>
<td style="text-align:center">access a 2D texture</td>
</tr>
<tr>
<td style="text-align:center"><code>samplerCube</code></td>
<td style="text-align:center">access cube mapped texture</td>
</tr>
</tbody>
</table>
<h2 id="qualifiers">Qualifiers</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Qualifier</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>attribute</code></td>
<td style="text-align:center">acts as a link between a vertex shader and OpenGL ES for per-vertex data. Its value changes for every execution of the vertex shader.</td>
</tr>
<tr>
<td style="text-align:center"><code>uniform</code></td>
<td style="text-align:center">links shader programs and the WebGL application. Its value is <code>read-only</code>. It can be used for to declare a variable with any basic data types: <code>uniform vec4 lightPosition;</code>.</td>
</tr>
<tr>
<td style="text-align:center"><code>varying</code></td>
<td style="text-align:center">forms a link between a vertex shader and fragment shader for interpolated data. It can be used with the following data types: <code>float</code>, <code>vec2</code>, <code>vec3</code>, <code>vec4</code>, <code>mat2</code>, <code>mat3</code>, <code>mat4</code>, <code>arrays</code> like: <code>varying vec3 normal;</code></td>
</tr>
</tbody>
</table>
<h2 id="vertex-shader">Vertex Shader</h2>
<p>Vertex shader is a program code, which is called on every vertex. Programmer have to define <code>attribute</code> in code of vertex shader to handle data. The <code>attribute</code> point to a VBO written in JavaScript.</p>
<h3 id="predefined-variables">Predefined Variables</h3>
<p>OpenGL ES SL provides the following predefined variables for every vertex shader</p>
<table>
<thead>
<tr>
<th style="text-align:center">Variables</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>highp vec4 gl_Position</code></td>
<td style="text-align:center">Holds the position of the vertex</td>
</tr>
<tr>
<td style="text-align:center"><code>mediump float gl_PointSize</code></td>
<td style="text-align:center">Holds the transformed point size</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">attribute</span> <span class="k">vec2</span> <span class="n">coordinates</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">gl_Position</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="n">coordinates</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>gl_Position</code> is the predefined variable which is available only in the vertex shader. It contains the vertex position. As vertex shader is a per-vertex operation, the <code>gl_Position</code> value is calculated for each vertex.</p>
<h2 id="fragment-shader">Fragment Shader</h2>
<p>A mesh is formed by multiple triangles, and the surface of each triangle is known as a fragment.</p>
<p>Fragment shader is the code that runs on every pixel on each fragment. This is written to calculate and fill the color on individual pixels.</p>
<h3 id="predefined-variables-1">Predefined Variables</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Variables</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>mediump vec4 gl_FragCoord;</code></td>
<td style="text-align:center">Holds the fragment position within the frame buffer</td>
</tr>
<tr>
<td style="text-align:center"><code>bool gl_FrontFacing;</code></td>
<td style="text-align:center">Holds the fragment that belongs to a front-facing primitive</td>
</tr>
<tr>
<td style="text-align:center"><code>mediump vec2 gl_PointCoord;</code></td>
<td style="text-align:center">Holds the fragment position within a point</td>
</tr>
<tr>
<td style="text-align:center"><code>mediump vec4 gp_FragColor;</code></td>
<td style="text-align:center">Holds the output fragment color value of the shader</td>
</tr>
<tr>
<td style="text-align:center"><code>mediump vec4 gl_FragData[n];</code></td>
<td style="text-align:center">Holds the fragment color for color attachment n</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="k">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="mo">0</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mo">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="store-and-compiling">Store and Compiling</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertCode</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;attribute vec2 coordinates;&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;void main(void) {&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;gl_Postion = vec4(coordinates, 0.0, 1.0);&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;}&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fragCode</span> <span class="o">=</span> <span class="s2">&#34;void main(void) {&#34;</span> <span class="o">+</span> <span class="s2">&#34;gl_FragColor = vec4(0, 0.8, 0, 1);&#34;</span> <span class="o">+</span> <span class="s2">&#34;}&#34;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Compilation involves following 3 steps</p>
<ul>
<li>Creating the shader object</li>
<li>Attaching the source code to the created shader object</li>
<li>Compiling the program</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertShader</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">vertShader</span><span class="p">,</span> <span class="nx">vertCode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">vertShader</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Same process for fragment shader</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fragShader</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">fragShader</span><span class="p">,</span> <span class="nx">fragCode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">fragShader</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="combined-program">Combined Program</h2>
<ul>
<li>Create a program object</li>
<li>Attach both the shaders</li>
<li>Link both the shaders</li>
<li>Use the program</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">shaderProgram</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="nx">vertShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="nx">fragShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="associating-attributes--buffer-objects">Associating Attributes &amp; Buffer Objects</h1>
<ul>
<li>Get the attribute location</li>
<li>Point the attributes to a vertex buffer object</li>
<li>Enable the attribute</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// ulong getAttribLocation(Object program, string name)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">coordinatesVar</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="s2">&#34;coordinates&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// void vertexAttribPointer(location, int size, enum type, bool normalized, long stride, long offset)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">gl</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">coordinatesVar</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">coordinatesVar</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="drawing-a-model">Drawing a Model</h1>
<h2 id="drawarrays">drawArrays()</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">void</span> <span class="n">drawArrays</span><span class="p">(</span><span class="k">enum</span> <span class="n">mode</span><span class="p">,</span> <span class="k">int</span> <span class="n">first</span><span class="p">,</span> <span class="k">long</span> <span class="n">count</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>mode: <code>gl.POINTS</code>, <code>gl.LINE_STRIP</code>, <code>gl.LINE_LOOP</code>, <code>gl.LINES</code>, <code>gl.TRIANGLE_STRIP</code>, <code>gl.TRANGLE_FAN</code>, <code>gl.TRIANGLES</code>.</li>
<li>first: specified the starting element in the enabled arrays. (Non-negative)</li>
<li>count: specifies the number of elements to be rendered.</li>
</ul>
<p><code>WebGL</code> will create the geometry in the order in which the vertex coordinates while rendering the shapes.</p>
<p>draw a triangle:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>draw two contiguous triangles:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<h2 id="drawelements">drawElements()</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-glsl" data-lang="glsl"><span class="line"><span class="cl"><span class="k">void</span> <span class="n">drawElements</span><span class="p">(</span><span class="k">enum</span> <span class="n">mode</span><span class="p">,</span> <span class="k">long</span> <span class="n">count</span><span class="p">,</span> <span class="k">enum</span> <span class="n">type</span><span class="p">,</span> <span class="k">long</span> <span class="n">offset</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>mode: same as <code>drawArrays()</code>;</li>
<li>count: same as <code>drawArrays()</code>;</li>
<li>type: specifies the data type of the indices which must be <code>UNSIGNED_BYTE</code> or <code>UNSIGNED_SHORT</code>;</li>
<li>offset: specifies the starting point for rendering, usually the first element (0);</li>
</ul>
<p>If use <code>drawElements()</code> to draw a model, then index buffer object should also be created along with the vertex buffer object. The vertex data will be processed once and used as many time as mentioned in the indices.</p>
<p>draw a triangle:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">indices</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span> <span class="nx">indices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
<p>draw two contagious triangles:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mf">0.0</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">indices</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">gl</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span> <span class="nx">indices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p></p>
]]></description>
</item>
<item>
    <title>WebGL Samples</title>
    <link>https://ayamir.github.io/posts/webgl-samples/</link>
    <pubDate>Thu, 03 Mar 2022 10:31:31 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/webgl-samples/</guid>
    <description><![CDATA[<h1 id="structure-of-webgl-application">Structure of WebGL Application</h1>
<p>WebGL application code is a combination of JavaScript and OpenGL Shader Language.</p>
<ul>
<li>JavaScript is required to communicate with the CPU.</li>
<li>OpenGL Shader Language is required to communicate with the GPU.</li>
</ul>
<p></p>
<h1 id="samples">Samples</h1>
<h2 id="2d-coordinates">2D coordinates</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">canvas</span> <span class="na">width</span><span class="o">=</span><span class="s">&#34;300&#34;</span> <span class="na">height</span><span class="o">=</span><span class="s">&#34;300&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;my_canvas&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">canvas</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 1. Prepare the canvas and get context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;my_canvas&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="kd">let</span> <span class="nx">gl</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&#34;experimental-webgl&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 2. Define the geometry and store it in buffer objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="mf">0.5</span><span class="p">,</span> <span class="c1">// vertex 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="mf">0.0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">-</span><span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">            <span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Create buffer object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">vertex_buffer</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Bind an empty array buffer to it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span> <span class="nx">vertex_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Pass the vertices data to the buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">vertices</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="nx">gl</span><span class="p">.</span><span class="nx">STATIC_DRAW</span>
</span></span><span class="line"><span class="cl">            <span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Unbind the buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 3. Create and compile Shader programs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Vertex shader source code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">vertCode</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;attribute vec2 coordinates;&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;void main(void) {&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34; gl_Position = vec4(coordinates, 0.0, 1.0);&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;}&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Create a vertex shader object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">vertShader</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Attach vertex shader source code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">vertShader</span><span class="p">,</span> <span class="nx">vertCode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Compile the vertex shader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">vertShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Fragment shader source code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">fragCode</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;void main(void) {&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;gl_FragColor = vec4(0.0, 0.0, 0.0, 0.1);&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;}&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kd">let</span> <span class="nx">fragShader</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">gl</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">fragShader</span><span class="p">,</span> <span class="nx">fragCode</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">gl</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">fragShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// Create a shader program object to store combined shader program
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">shaderProgram</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Attact vertex and fragment shader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="nx">vertShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">gl</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="nx">fragShader</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Link both programs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Use the combined shader program object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 4. Associate the shader programs to buffer objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Bind vertex buffer object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span> <span class="nx">vertex_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Get the attribute location
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kd">let</span> <span class="nx">coord</span> <span class="o">=</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">shaderProgram</span><span class="p">,</span> <span class="s2">&#34;coordinates&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Point an attribute to the currently bound VBO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">coord</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">gl</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Enable the attribute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">coord</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 5. Drawing the required object (triangle)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Clear the canvas
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Enable the depth test
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Clear the color buffer bit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">COLOR_BUFFER_BIT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Set the view port
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Draw the triangle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">gl</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">gl</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>WebGL Pipeline</title>
    <link>https://ayamir.github.io/posts/webgl-pipeline/</link>
    <pubDate>Thu, 03 Mar 2022 10:31:22 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/webgl-pipeline/</guid>
    <description><![CDATA[<h1 id="overview">Overview</h1>
<p></p>
<h1 id="javascript">JavaScript</h1>
<p>JavaScript is used to write the control code of the program, which includes the following actions:</p>
<ul>
<li>Initialization: initialize WebGL context.</li>
<li>Arrays: create arrays to hold the data of the geometry.</li>
<li>Buffer objects: create buffer objects by passing the arrays as parameters.</li>
<li>Shaders: create, compile and link the shaders.</li>
<li>Attributes: create attributes, enable them and associate them with buffer objects.</li>
<li>Uniforms: associate the uniforms.</li>
<li>Transformation matrix: create transformation matrix.</li>
</ul>
<h1 id="vertex-shader">Vertex Shader</h1>
<p>The vertex shader is executed for each vertex provided in the vertex buffer object when start the rendering process by invoking the methods <code>drawElements()</code> and <code>drawArrays()</code>.</p>
<ul>
<li>
<p>It calculates the position of each vertex of a primitive polygon and stores it in the varying <code>gl_position</code></p>
</li>
<li>
<p>It calculates the other attributes such as color, texture coordinates and vertices that are normally associated with a vertex.</p>
</li>
</ul>
<h1 id="primitive-assembly">Primitive Assembly</h1>
<p>Here the triangles are assembled and passed to the rasterizer.</p>
<h1 id="resterization">Resterization</h1>
<p>The pixels in the final image of the primitive are determined.</p>
<ul>
<li>Culling: Initially the orientation of the polygons is determined. All those triangles with improper orientation that are not visible in view area are discarded.</li>
<li>Clipping: If a triangle is partly outside the view area, then the part outside the view area is removed.</li>
</ul>
<h1 id="fragment-shader">Fragment Shader</h1>
<p>The fragment shader gets:</p>
<ul>
<li>
<p>data from the vertex shader in varying variables</p>
</li>
<li>
<p>primitives from the rasterization stage</p>
</li>
</ul>
<p>then:</p>
<ul>
<li>calculates the color value for each pixel between the vertices</li>
<li>stores the color values of every pixel in each fragment</li>
</ul>
<h1 id="fragment-operations">Fragment Operations</h1>
<p>The fragment operations may include:</p>
<ul>
<li>Depth</li>
<li>Color buffer blend</li>
<li>Dithering</li>
</ul>
<p>Once all the fragments are processed, a 2D image is formed and displayed on the screen.</p>
<h1 id="frame-buffer">Frame Buffer</h1>
<p>Frame buffer is the final destination of the rendering pipeline.</p>
<p>Frame buffer is a portion of graphics memory that hold the scene data.</p>
<p>This buffer contains details such as width and height of the surface (in pixels), color of each pixel and depth and stencil buffers.</p>
<p></p>
]]></description>
</item>
<item>
    <title>WebGL Basics</title>
    <link>https://ayamir.github.io/posts/webgl-basics/</link>
    <pubDate>Thu, 03 Mar 2022 10:31:04 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/webgl-basics/</guid>
    <description><![CDATA[<h1 id="coordinate-system">Coordinate System</h1>
<p>There are x, y, z axes in WebGL, where the z axis signifies <strong>depth</strong>.
The coordinates in WebGL are restricted to (1, 1, 1) and (-1, -1, -1).
Positive value meaning:
z: near viewer.
x: near right.
y: near top.</p>
<p></p>
<h1 id="graphics-system">Graphics System</h1>
<h2 id="vertices">Vertices</h2>
<p>To draw a polygon, we need to mark the points on the plane and join them to form a desired polygon.
A <code>vertex</code> is a point which defines the conjunction of the edges of a 3D object.
Use <code>javascript</code> arrays to stores points&rsquo; coordinates like <code>[0.5, 0.5, 0.5]</code>.</p>
<h2 id="indices">Indices</h2>
<p>The numerical values which are used to identify the vertices is call <code>Indices</code>.</p>
<h2 id="arrays">Arrays</h2>
<p>There are no predefined methods in WebGL to render the vertices directly.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">vertices</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="buffers">Buffers</h2>
<p>Buffers are the memory areas of WebGL that hold the data.
There are various buffers:</p>
<ul>
<li><code>drawing buffer</code></li>
<li><code>frame buffer</code></li>
<li><code>vertex buffer</code></li>
<li><code>index buffer</code></li>
</ul>
<p>The <code>vertex buffer</code> and <code>index buffer</code> are used to describe and process the geometry of the model, stores data about <code>vertices</code> and <code>indices</code> respectively.</p>
<p>The <code>frame buffer</code> is a portion of graphics memory that hold the scene data. This buffer contains details such as width and height of the surface (in pixels), color of each pixel, depth and stencil buffers.</p>
<h2 id="mesh">Mesh</h2>
<p>The WebGL API provides two methods to draw 2D or 3D objects:</p>
<ul>
<li><code>drawArrays()</code></li>
<li><code>drawElements()</code></li>
</ul>
<p>They accept a parameter called <code>mode</code> using which you can select the object you want to draw.</p>
<p><code>mode</code>: <code>points</code> or <code>lines</code> or <code>triangles</code></p>
<p>We can construct primitive polygons using points, lines and triangles.</p>
<p>Thereafter, we can form a <code>mesh</code> using these polygons.</p>
<p>A 3D object drawn using primitive polygons is called a <code>mesh</code>.</p>
<h2 id="shader-programs">Shader Programs</h2>
<p>Since WebGL uses GPU accelerated computing, the information about these triangles should be transferred from CPU to GPU which takes a lot of communication overhead.</p>
<p>WebGL provides a solution to reduce the communication overhead. Since it uses ES SL(Embedded System Shader Language) that runs on GPU, we write all the required programs to draw graphical elements on the client system using shader programs(OpenGL ES Shader Language).</p>
<p>Shader is a snippet that implements algorithms to get pixels for a mesh.</p>
<p>There are two types of shaders: <code>Vertex Shader</code> and <code>Fragment Shader</code>.</p>
<h3 id="vertex-shader">Vertex Shader</h3>
<ul>
<li>called on every vertex.</li>
<li>used to transform the geometry from one place to another.</li>
<li>handle the data of each vertex such as vertex coordinates, normals, colors, and texture coordinates.
<ul>
<li>vertex transformation</li>
<li>normal transformation and normalization</li>
<li>texture coordinate generation</li>
<li>texture coordinate transformation</li>
<li>lighting</li>
<li>color material application</li>
</ul>
</li>
</ul>
<h3 id="fragment-shaderpixel-shader">Fragment Shader(Pixel Shader)</h3>
<p>A mesh is formed by multiple triangles. The surface of each of the triangles is known as a fragment.</p>
<p><code>Fragment shader</code> is the code that runs on all pixels of every fragment.</p>
<p>It is written to calculate and fill the color on <em>individual pixels</em>.</p>
<ul>
<li>operations on interpolated values</li>
<li>texture access</li>
<li>texture application</li>
<li>fog</li>
<li>color sum</li>
</ul>
<p></p>
<h2 id="opengl-es-sl-variables">OpenGL ES SL Variables</h2>
<p>To handle the data in the shader programs, ES SL provides three types of variables.</p>
<ul>
<li>
<p>Attributes: hold the input values of the vertex shader program. Attributes point to the vertex buffer objects that contains per-vertex data.</p>
</li>
<li>
<p>Uniforms: hold the input data that is common for both vertex and fragment shaders, such as light position, texture coordinates and color.</p>
</li>
<li>
<p>Varyings: used to pass the data from the vertex shader to the fragment shader.</p>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Note for Survey on Bitrate Adaptation Schemes for Streaming Media Over HTTP (2)</title>
    <link>https://ayamir.github.io/posts/note-for-survey-on-bitrate-adaptation-schemes-for-streaming-media-over-http-2/</link>
    <pubDate>Sun, 27 Feb 2022 10:39:45 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-survey-on-bitrate-adaptation-schemes-for-streaming-media-over-http-2/</guid>
    <description><![CDATA[<h1 id="bitrate-adaptation-schemes">Bitrate Adaptation Schemes</h1>
<h2 id="client-based">Client-based</h2>
<p>Recently, most of the proposed bitrate adaptation schemes reside at the client side, according to the specifications in the DASH standard.</p>
<p></p>
<p>Purposes:</p>
<ol>
<li>Minimal rebuffering events when the playback buffer depletes.</li>
<li>Minimal startup delay especially in case of live video streaming.</li>
<li>A high overall playback bitrate level with respect to network resources.</li>
<li>Minimal video quality oscillations, which occur due to frequent switching.</li>
</ol>
<h3 id="available-bandwidth-based">Available bandwidth-based</h3>
<p>The client makes its representation decisions based on the measured available network bandwidth, which is usually calculated as the size of the fetched segment(s) divided by the transfer time.</p>
<p>This scheme suffers from poor QoE due to a lack of a reliable bandwidth estimation methods, which results in frequent buffer underruns.</p>
<h4 id="general-context">General context</h4>
<ul>
<li>
<p><a href="https://dl.acm.org/doi/10.1145/1943552.1943575" target="_blank" rel="noopener noreffer">Based on segment fetch time(SFT)</a> measures the time starting from sending the HTTP GET request to receiving the last byte of the segment. Sequential and parallel segment fetching method in CDNs, by using metric that compares the expected segment fetch time(ESFT) with the measured SFT to determine if the selected segment bitrate matches the network capacity.</p>
<p><a href="https://ieeexplore.ieee.org/document/6333880/" target="_blank" rel="noopener noreffer">Based on the bitrate observed for the last segment downloaded</a> and the estimated throughput that was calculated during the previous estimation.</p>
</li>
<li>
<p><a href="https://ieeexplore.ieee.org/document/6774592" target="_blank" rel="noopener noreffer">Probe AND Adapt</a> tries to eliminate the ON-OFF steady state issue as well as reduce bitrate oscillations when multiple clients share the same bottleneck link.</p>
</li>
<li>
<p><a href="https://dl.acm.org/doi/10.1145/2789168.2790118" target="_blank" rel="noopener noreffer">piStream</a> enables clients to estimate bandwidth based on a resource monitor module that act as a physical-layer daemon.</p>
</li>
<li>
<p><a href="https://dl.acm.org/doi/10.1145/2155555.2155580" target="_blank" rel="noopener noreffer">SVC with DASH</a> prefetches base layers of future segments or downloads enhancement layers for existing segments using a bandwidth-sloping-based heuristic.</p>
</li>
</ul>
<h4 id="mobile-context">Mobile context</h4>
<h5 id="static">Static</h5>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2964284.2964313" target="_blank" rel="noopener noreffer">DASH2M</a> uses HTTP/2 server push and stream terminate properties to reduce the battery consumption of the mobile device. Adaptive k-push scheme propose to increase/decrease k according to a bandwidth increase/decrease while keeping in mind the overall power consumption in a push cycle.</li>
<li><a href="https://dl.acm.org/doi/10.1145/2990505" target="_blank" rel="noopener noreffer">LOw-LatenceY Prediction-based adaPtation(LOLYPOP)</a> leverages TCP throughput predictions on multiple times scales to achieve low latency and improve QoE.</li>
</ul>
<h5 id="motive">Motive</h5>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2964284.2964333" target="_blank" rel="noopener noreffer">GeoStream</a>: introduce the use of geostatistics to estimate future bandwidth in unknown locations.</li>
</ul>
<h3 id="playback-buffer-based">Playback Buffer-Based</h3>
<p>The client uses the playout buffer occupancy as a criterion to select the next segment bitrate during video playback.</p>
<p>This scheme suffers from many limitations including low overall QoE and instability issues, especially in the case of long-term bandwidth fluctuations. SVC-based approaches have limitations related to the complexity of SVC.</p>
<ul>
<li><a href="https://ieeexplore.ieee.org/document/7177435" target="_blank" rel="noopener noreffer">Base</a> combines the buffer size with a tool-set of client metrics for accurate rate selection and smooth switching.</li>
<li><a href="https://dl.acm.org/doi/10.1145/2619239.2626296" target="_blank" rel="noopener noreffer">BBA</a> aims to maximize the average video quality and avoid unnecessary rebuffering events, but suffers from QoE degradation during long-term bandwidth fluctuations.</li>
<li><a href="https://ieeexplore.ieee.org/document/7524428" target="_blank" rel="noopener noreffer">BOLA</a> uses online control algorithm that treats bitrate adaptation as a utility maximization problem. Provide strong theorectical proof that it is near optimal, design a QoE model that incorporates both the average playback quality and the rebuffering time. It is implemented and available in the <code>dash.js</code> player.</li>
<li><a href="https://ieeexplore.ieee.org/document/6573184" target="_blank" rel="noopener noreffer">BIEB</a> maximizes video quality based on SVC priority while reducing the number of quality oscillations and avoiding stalls and frequent bitrate switching. it maintains a stable buffer occupancy before increasing the quality.</li>
<li><a href="https://dl.acm.org/doi/10.1145/3123266.3123390" target="_blank" rel="noopener noreffer">QUEuing Theory approach to DASH Rate Adaptation(QUETRA)</a> allows to calculate the expected buffer occupancy given a bitrate choice, network throughput, and buffer capacity.</li>
</ul>
<h3 id="mixed-adaptation">Mixed Adaptation</h3>
<p>The client makes its bitrate selection based on a combination of metrics including available bandwidth, buffer occupancy, segment size and/or duration.</p>
<h4 id="simple-client">Simple client</h4>
<ul>
<li>Control-theoretic based: <a href="https://dl.acm.org/doi/10.1145/2829988.2787486" target="_blank" rel="noopener noreffer">FastMPC</a>, <a href="https://ieeexplore.ieee.org/document/6410740" target="_blank" rel="noopener noreffer">Another</a></li>
<li>Optimization problem: <a href="https://dl.acm.org/doi/10.1145/2557642.2557658" target="_blank" rel="noopener noreffer">Streaming video over HTTP with Consistent Quality</a></li>
<li><a href="https://dl.acm.org/doi/10.1145/2413176.2413190" target="_blank" rel="noopener noreffer">Towards agile and smooth video adaptation in dynamic HTTP streaming</a> aims to balance bandwidth utilization and smoothness in DASH in both single and multiple CDN(s) scenarois.</li>
<li><a href="https://dl.acm.org/doi/10.1145/2910017.2910593" target="_blank" rel="noopener noreffer">SQUAD</a> is a lightweight bitrate adaptation algorithm that uses the available bandwidth and buffer information to increase the average bitrate while minimizing the number of quality switches.</li>
<li><a href="https://dl.acm.org/doi/10.1145/2155555.2155582" target="_blank" rel="noopener noreffer">Multi-path solution for abr in wireless networks</a> avoids the problems of TCP congestion control by using parallel TCP streams.</li>
<li><a href="https://ieeexplore.ieee.org/document/7247436" target="_blank" rel="noopener noreffer">SARA</a> is Segment-Aware Rate Adaptation algorithm based on the segment size variation, the available bandwidth estimate and the buffer occupancy. It extends MPD file to include the size of every segment.</li>
<li><a href="https://dl.acm.org/doi/10.1145/2910017.2910596" target="_blank" rel="noopener noreffer">ABMA+</a> selects the highest segment representation based on the estimated <em>probability of video rebuffering</em>. It makes use of buffer maps, which define the playout buffer capacity that is required under certain conditions to satisfy a rebuffering threshold and to avoid heavy online calculations.</li>
<li><a href="https://dl.acm.org/doi/10.1145/3204949.3204961" target="_blank" rel="noopener noreffer">GTA</a> uses a cooperative game in coalition formation then formulates the bitrate selection problem as a bargaining process and consensus mechanism. GTA improves QoE and video stability without increasing the stall rate or startup delay.</li>
</ul>
<h4 id="multiple-clients">Multiple clients</h4>
<ul>
<li><a href="https://ieeexplore.ieee.org/document/6691442" target="_blank" rel="noopener noreffer">ELASTIC</a> generates a long-lived TCP flow and avoids the ON-OFF steady state behavior which leads to bandwidth overestimations. Ensure bandwidth fairness between competing clients based on network feedback assistance, but without taking the QoE into consideration. In addition, it ignores quality oscillations in its bitrate decisions.</li>
<li><a href="https://ieeexplore.ieee.org/document/6229732" target="_blank" rel="noopener noreffer">Adaptation algorithm for HAS</a> uses current buffer occupancy level to estimate available bandwidth and average bitrate of the different bitarte levels from MPD as metrics in its bitrate selection.</li>
<li><a href="https://ieeexplore.ieee.org/document/6704839" target="_blank" rel="noopener noreffer">FESTIVE</a> contains:
<ul>
<li>a bandwidth estimator module</li>
<li>a bitrate selection and update method with stateful player</li>
<li>a randomized scheduler which incorporates the buffer size to schedule the download of the next segment.</li>
</ul>
</li>
<li><a href="https://ieeexplore.ieee.org/document/8101529" target="_blank" rel="noopener noreffer">TSDASH</a> uses a logarithmic-increase-multiplicative-decrease (LIMD) based bandwidth probing algorithm to estimate the available bandwidth and a dual-threshold buffer for the bitrate adaptation.</li>
</ul>
<h3 id="mdp-based">MDP-Based</h3>
<p>The video streaming process is formulated as a finite MDP to be able to make adaptation decisions under fluctuating network conditions.</p>
<p>This scheme may suffer from instability, unfairness and underutilization when the number of clients increases, probably because such factors are not taken into account in the MDP models and due to clients&rsquo; decentralized ON-OFF patterns.</p>
<ul>
<li><a href="https://ieeexplore.ieee.org/document/6774598" target="_blank" rel="noopener noreffer">Real-time best-action search algorithm over multiple access networks</a> uses both Bluetooth and WiFi links to simultaneously download video segments. However, this scheme shows limitations during user mobility which negatively affect QoE.</li>
<li><a href="https://ieeexplore.ieee.org/document/7305810" target="_blank" rel="noopener noreffer">Optimizing in Vehicular environment</a> introduces a three-variant of RL-based algorithms which take advantage of the historical bandwidth samples to build an accurate bandwidth estimation model.</li>
<li><a href="https://ieeexplore.ieee.org/document/6838245" target="_blank" rel="noopener noreffer">Multi-agent Q-Learning-based for fairness</a> uses a central manager in charge of collecting QoE statistics and coordination between the competing clients. The algorithm ensures a fair QoE distribution and improves QoE while avoiding suboptimal decisions.(without considering stalls and quality switches)</li>
<li><a href="https://dl.acm.org/doi/10.1145/2910017.2910603" target="_blank" rel="noopener noreffer">Online learning adaptation</a> aims to select the optimal representation and maximize the long-term expected QoE. The reward function is calculated from a combination of quality oscillations, segment quality and stalls experienced by the client. It exploits a parallel learning technique to avoid slow convergence and suboptimal solutions.</li>
<li><a href="https://ieeexplore.ieee.org/document/7393865" target="_blank" rel="noopener noreffer">mDASH</a> aims to improve QoE during long-term bandwidth variations. It takes buffer size, bandwidth conditions and bitrate stability as Markov state variables.</li>
<li><a href="https://dl.acm.org/doi/10.1145/3098822.3098843" target="_blank" rel="noopener noreffer">Pensive</a> does not rely on pre-programmed models or assumptions about the environment, but gradually learns the best policy for bitrate decisions through observation and experience.</li>
<li><a href="https://ieeexplore.ieee.org/document/8048013" target="_blank" rel="noopener noreffer">D-DASH</a> combines DL and RL to improve QoE, achieves a good trade-off between policy optimality and convergence speed during the decision process.</li>
</ul>
<h2 id="server-based">Server-Based</h2>
<p>Server-based schemes use a bitrate shaping method at the server side and do not require any cooperation from the client. The switching between the bitrates is implicitly controlled by the bitrate shaper. The client still makes its own decisions, but the decisions are more or less determined by the shaping method on the server.</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2155555.2155557" target="_blank" rel="noopener noreffer">Traffic shaping</a> analyzes instability and unfairness issues in the presence of multiple HAS players competing for the available bandwidth. This method can be deployed at a home gateway to improve fairness, stability and convergence delay, and to eliminate the OFF periods during the steady states.</li>
<li><a href="https://ieeexplore.ieee.org/document/7524620" target="_blank" rel="noopener noreffer">Tracker-assisted adaptation</a> uses a architecture which consists of clients communicating with a server through a shared proxy and a server having a tracker functionality that manages the clients&rsquo; statuses and helps them share knowledge about their statues.</li>
<li><a href="https://dl.acm.org/doi/10.1145/1943552.1943573" target="_blank" rel="noopener noreffer">Quality Adaptation Controller</a> aims to control the size of the server sending buffer in order to adjust and select the most appropriate bitrate level for each DASH player. It maintains the playback buffer occupancy of each player as stable as possible and to match bitrate level decisions with the available bandwidth.</li>
<li><a href="https://ieeexplore.ieee.org/document/7983147/" target="_blank" rel="noopener noreffer">Multi-Source Stream system</a>: the client fetches the segments from multi-source stream servers.</li>
</ul>
<p></p>
<p>Cons:</p>
<ol>
<li>Produce high overhead on the server side with a high complexity</li>
<li>These schemes also need modifications to the MPD or a custom server software to implement the bitrate adaptation logic.(a violation of the DASH-standard design principles)</li>
</ol>
]]></description>
</item>
<item>
    <title>Note for Survey on Bitrate Adaptation Schemes for Streaming Media Over HTTP (1)</title>
    <link>https://ayamir.github.io/posts/note-for-survey-on-bitrate-adaptation-schemes-for-streaming-media-over-http-1/</link>
    <pubDate>Sat, 26 Feb 2022 11:26:06 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-survey-on-bitrate-adaptation-schemes-for-streaming-media-over-http-1/</guid>
    <description><![CDATA[<h1 id="paper-overview">Paper Overview</h1>
<p>Link: <a href="https://ieeexplore.ieee.org/document/8424813" target="_blank" rel="noopener noreffer">https://ieeexplore.ieee.org/document/8424813</a></p>
<p>Level: IEEE Communications Surveys &amp; Tutorials 2019</p>
<h1 id="background">Background</h1>
<h2 id="traditional-non-has-ip-based-streaming">Traditional non-HAS IP-based streaming</h2>
<ol>
<li>
<p>The client receives media that is typically <em>pushed</em> by a media server using <strong>connection-oriented</strong> protocol such as Real-time Messaging Protocol(RTMP/TCP) or <strong>connectionless</strong> protocol such as Real-time Transport Protocol(RTP/UDP).</p>
</li>
<li>
<p>Real-time Streaming Protocol(RTSP) is a common protocol to control the media servers, which is responsible for setting up a streaming session and keeping the state information during this session, but is not responsible for actual media delivery(task for protocol like RTP).</p>
</li>
<li>
<p>The media server performs rate adaption and data delivery scheduling based on the RTP Control Protocol(RTCP) reports sent by the client.</p>
</li>
<li>
<p>When it comes to NAT and firewall, additional protocols or configurations are needed during the session establishment.</p>
</li>
</ol>
<p>The characteristics result in complex and expensive servers. These scalability and vendor dependency issues as well as high maintenance costs have resulted in deployment challenges for protocols like RTSP.</p>
<h2 id="has">HAS</h2>
<p>Around 2005, HTTP adaptive streaming(HAS) became popular and dominant, which treated the media content like regular Web content and delivered it in small pieces over HTTP protocol.</p>
<ol>
<li>HTTP as application and TCP as the transport-layer protocol.</li>
<li>Client <em>pull</em> the data from a standard HTTP server, which simply hosts the media content.</li>
<li>HAS solutions employ dynamic adaptation with respect to varying network conditions to provide a seamless streaming experience.</li>
<li>The original file/stream is partitioned into <em>segments</em> (also called <em>chunks</em>) of equi-length playback time. Multiple versions(also called representations) of each segment are generated that vary in bitrate/resolution/quality using an encoder or a transcoder.</li>
<li>The server generates an index file, which is a manifest that lists the available representations including HTTP urls to identify the segments along with their availability times.</li>
<li>The client first receives the manifest that contains the metadata for video, audio, subtitles and other features, then constantly measures certain parameters: available network bandwidth, buffer status, battery and CPU levels, etc. According to these parameters, the HAS client repeatedly fetches the most suitable next segment among the available representations from the server.</li>
</ol>
<p>Advantages:</p>
<ol>
<li>It use HTTP to deliver video segments, which simplifies the traversal through NATs and firewalls.</li>
<li>At the server side, it use conventional Web servers or caches available within the networks of ISPs and CDNs.</li>
<li>At the client side, it requests and fetches each segment independently from others and maintains the playback session state, whereas the server is not required to maintain any state.</li>
<li>It doesn&rsquo;t require a persistent connection between the client and server, which improves system scalability and reduces implementation and deployment costs.</li>
</ol>
<h2 id="comparison-summary">Comparison Summary</h2>
<p></p>
<p></p>
<h1 id="challenges">Challenges</h1>
<h2 id="multi-client-competitionstability-issues">Multi-Client Competition/Stability Issues</h2>
<p>A centralized management controller can enhance the overall video quality, while improve QoE.</p>
<p>A robust HAS scheme should achieve 3 main objectives:</p>
<ol>
<li><em>Stability</em>: HAS clients should avoid frequent bitrate switching.</li>
<li><em>Fairness</em>: Multiple HAS clients competing for available bandwidth should equally share network resources based on viewer, content and device characteristics.</li>
<li><em>High Utilization</em>: While the clients attempt to be stable and fair, network resources should be used as efficiently as possible.</li>
</ol>
<p>A streaming session consists of 2 states: buffer-filling state and steady state.</p>
<ul>
<li>
<p>The buffer-filling state aims to fill the playback buffer and reach a certain threshold where the playback can be initiated or resumed.</p>
</li>
<li>
<p>The steady state is to keep the buffer level above a minimum threshold despite bandwidth fluctuation or interruptions. The steady state consists of 2 activity periods referred to as ON and OFF.</p>
<p>The client requests a segment every $T_s$ time units, where $T_s$ represents the content time duration of each segment, and sum of ON and OFF period durations equals $T_s$.</p>
<ul>
<li>ON period: client downloads the current segment and notes the achieved throughput value that will be later used in selecting the appropriate bitrate for future segments.</li>
<li>OFF period: client becomes idle temporarily.</li>
</ul>
</li>
</ul>
<p></p>
<p>There are different cases during competition process.</p>
<ol>
<li>
<p>The ON periods of clients don&rsquo;t overlap during the current segment download, each client will overestimate the available bandwidth. So longer download time will cause the initially non-overlapping ON periods to eventually start overlapping.</p>
<p></p>
</li>
<li>
<p>As the amount of overlap increases, the clients will have lower bandwidth estimations and start selecting segments that have lower bitrate. These segment will take less time to download, causing the amount of overlap among the ON periods to precedurally shorten, until the process reverts to its initial situation.</p>
<p></p>
</li>
<li>
<p>The cycle repeats itself, causing periodic up and down shift in the selected bitrates, leading to unstable video quality, unfairness, and underutilization.</p>
<p></p>
</li>
</ol>
<h2 id="consistent-quality-streaming">Consistent-Quality Streaming</h2>
<p>The correlation between video bitrate and its perceptual quality is non-linear.</p>
<ul>
<li>Different video content types have unique characteristics.</li>
<li>Differences of inter-stream and intra-stream video scene complexity across content.</li>
</ul>
<p></p>
<p></p>
<h2 id="qoe-optimization-and-measurement">QoE Optimization and Measurement</h2>
<p>HAS scheme uses application control loop, which also interacts with a lower-layer control loop(such as TCP congestion control). It plays a key role in determining the viewer QoE.</p>
<p></p>
<p>Factors influencing QoE are categorized as:</p>
<ol>
<li>Perceptual, directly perceived by the viewer.</li>
<li>Technical, indirectly affecting the QoE.</li>
</ol>
<h3 id="perceptual">Perceptual</h3>
<p>Perceptual factors include the video image quality, initial delay, stalling duration and frequency.</p>
<p>The impact of these factors differs depending on the users subjectivity.</p>
<p>Most users consider initial delays less critical than stalling.</p>
<h3 id="technical">Technical</h3>
<p>Technical factors include the algorithms, parameters, and hardware/software used in streaming system.</p>
<p>Specifically, factors are:</p>
<ul>
<li>Server side: encoding parameters, video qualities and segment size.</li>
<li>Client side: adaptation parameters and environment that clients reside in.</li>
</ul>
<h3 id="qoe-measurement">QoE measurement</h3>
<ol>
<li>Objective matrics: Peak Signal-to-Noise Ratio(PSNR), Structural SIMilarity(SSIM and SSIMplus), Perceived Video Quality(PVQ) and Statistically Indifferent Quality Variation(SIQV).</li>
<li>Subjective matrics: Mean Opinion Score(MOS).</li>
<li>Quality-of-Service (QoS)-derived matrics: startup delay, average video bitrate, quality switches and rebuffering events.</li>
</ol>
<p>Try to optimize each metric is difficult because it may result in conflicts.</p>
<h2 id="inter-destination-multimedia-synchronization">Inter-Destination Multimedia Synchronization</h2>
<p>Online communities are drifting towards watching online videos together in a synchronized manner.</p>
<p>Having Multiple streaming clients distributed in different geographical locations poses challenges in delivering video content simultaneously, while keeping the playback state of each client the same.</p>
<p>Typically, IDMS solutions involve a master node to which clients synchronize their playout to.</p>
<p>Rainer et proposed an IDMS architecture for DASH by using a distribute control scheme where peers can communicate and negotiate a reference placback timestamp in each session.</p>
<p>In another work, Rainer et provided a crowdsourced subjective evaluation to find a asynchronism threshold at which QoE was not significantly affected.</p>
]]></description>
</item>
<item>
    <title>WebXR for Panoramic Video</title>
    <link>https://ayamir.github.io/posts/webxr-for-panoramic-video/</link>
    <pubDate>Fri, 25 Feb 2022 11:04:23 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/webxr-for-panoramic-video/</guid>
    <description><![CDATA[<p>最近几天一直在用<code>WebXR</code>的技术重构目前的基于分块的全景视频自适应码率播放客户端，下面简述一下过程。</p>
<p>首先结论是：分块播放+自适应码率+完全的沉浸式场景体验=Impossible（直接使用WebXR提供的API）</p>
<h2 id="分块播放">分块播放</h2>
<p>分块播放的本质是将一整块的全景视频从空间上划分成多个小块，各个小块在时间上与原视频的长度是相同的。</p>
<p>在实际播放的时候需要将各个小块按照原有的空间顺序排列好之后播放，为了避免各个分块播放进度不同的问题，播放时还需要经过统一的时间同步。</p>
<p>对应到web端的技术实现就是：</p>
<p>一个分块的视频&lt;-&gt;一个<code>&lt;video&gt;</code>h5元素&lt;-&gt;一个<code>&lt;canvas&gt;</code>h5元素</p>
<p>视频的播放过程就是各个分块对应的<code>&lt;canvas&gt;</code>元素不断重新渲染的过程</p>
<p>各个分块时间同步的实现需要一个基准视频进行对齐，大体上的原理如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">baseVideo</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">videos</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">initBaseVideo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">initVideos</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nx">video</span> <span class="k">in</span> <span class="nx">videos</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">video</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">=</span> <span class="nx">baseVideo</span><span class="p">.</span><span class="nx">currentTime</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="自适应码率">自适应码率</h2>
<p>自适应码率的方案使用<code>dashjs</code>库实现，即对每个分块<code>&lt;video&gt;</code>元素的播放都用<code>dashjs</code>的方案控制：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">MediaPlayer</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;dashjs&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">videos</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">dashs</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">mpdUrls</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">initVideos</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">initMpdUrls</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tileNum</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">video</span> <span class="o">=</span> <span class="nx">videos</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">dash</span> <span class="o">=</span> <span class="nx">MediaPlayer</span><span class="p">().</span><span class="nx">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dash</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">video</span><span class="p">,</span> <span class="nx">mpdUrls</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dash</span><span class="p">.</span><span class="nx">updateSettings</span><span class="p">(</span><span class="nx">dashSettings</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dashs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">dash</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过对<code>dashSettings</code>的调整的可以设置各种可用的dash参数如不同质量版本下的缓冲区长度，播放暂停时是否终止后台下载等。</p>
<h2 id="沉浸式场景体验">沉浸式场景体验</h2>
<p>全景视频的完全的沉浸式体验目前在<code>Oculus Browser</code>上有两种实现方式：</p>
<ol>
<li>直接使用浏览器默认的全屏功能之后选择视频为：普通视频或180度视频或360度视频。</li>
<li>使用最新的<code>WebXR session</code>的<code>layers</code>特性，手动代码实现。</li>
</ol>
<p>第1种方式因为并没有给出实际的<code>API</code>，所以不可能与分块传输的视频相结合，所以只能使用第2种方式手动实现。</p>
<p>其对应的草案标准地址：https://www.w3.org/TR/webxrlayers-1/</p>
<p></p>
<p>可以看到目前最新的开发标准刚在1个月前完成。</p>
<p><code>WebXR</code>中的开发流程如下：</p>
<ol>
<li>判断浏览器是否支持<code>immersive-vr</code>，如果支持就请求<code>xrSession</code>，所需的特性为<code>layers</code>：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">WebXRButton</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;webxr-button.js&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">xrButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebXRButton</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">onRequestSession</span><span class="o">:</span> <span class="nx">onRequestSession</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">onEndSession</span><span class="o">:</span> <span class="nx">onEndSession</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">xrSession</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onRequestSession</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">xrSession</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">navigator</span><span class="p">.</span><span class="nx">xr</span><span class="p">.</span><span class="nx">requestSession</span><span class="p">(</span><span class="s1">&#39;immersive-vr&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">requiredFeatures</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;layers&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">onSessionStarted</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">onEndSession</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onEndSession</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">xrSession</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">xr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">navigator</span><span class="p">.</span><span class="nx">xr</span><span class="p">.</span><span class="nx">isSessionSupported</span><span class="p">(</span><span class="s1">&#39;immersive-vr&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">supported</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="nx">supported</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">xrButton</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">=</span> <span class="nx">supported</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>获取到需要的<code>xrSession</code>之后请求<code>ReferenceSpace</code>，并创建会话中需要的对象，之后用创建的图层更新会话的渲染器状态，并设置<code>requestAnimationFrame</code>需要的回调函数：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">xrRefSpace</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">xrMediaFactory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onSessionStarted</span><span class="p">(</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">xrSession</span> <span class="o">=</span> <span class="nx">session</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">xrButton</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;Exit XR&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nx">xrMediaFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XRMediaBinding</span><span class="p">(</span><span class="nx">session</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nx">session</span><span class="p">.</span><span class="nx">requestReferenceSpace</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">refSpace</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">xrRefSpace</span> <span class="o">=</span> <span class="nx">refSpace</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">baseLayer</span> <span class="o">=</span> <span class="nx">xrMediaFactory</span><span class="p">.</span><span class="nx">createEquirectLayer</span><span class="p">(</span><span class="nx">baseVideo</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="nx">space</span><span class="o">:</span> <span class="nx">refSpace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        	<span class="nx">centralHorizontalAngle</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    	<span class="p">});</span>
</span></span><span class="line"><span class="cl">    	<span class="nx">session</span><span class="p">.</span><span class="nx">updateRenderState</span><span class="p">({</span><span class="nx">layers</span><span class="o">:</span> <span class="p">[</span><span class="nx">baseLayer</span><span class="p">]});</span>
</span></span><span class="line"><span class="cl">    	<span class="nx">session</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">onXRFrame</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>最后设置每次<code>xrSession</code>要求渲染新帧的函数，并设定渲染循环：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">xrViewerPose</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">onXRFrame</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">frame</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">session</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">session</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="nx">onXRFrame</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nx">xrViewerPose</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">getViewerPose</span><span class="p">(</span><span class="nx">xrRefSpace</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">xrViewerPose</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>onXRFrame</code>函数在每次渲染新帧时调用，其中每帧对应的观看者的相对位置以及头戴设备的线速度和角速度等变量可以从<code>xrViewerPose</code>中取得。</p>
<p>这么看<code>WebXR</code>的完全沉浸式体验是可行的，但是问题出在需要与分块结合。</p>
<p><code>xrMediaFactory</code>作为<code>XRMediaBinding</code>绑定到当前<code>xrSession</code>的实例对象，可以用来创建采用等距长方形投影的方式的图层<code>XREquirectLayer</code>：</p>
<p></p>
<p>虽然这里出现了可以创建采用<code>Equirectangular</code>方式投影的图层，并可以通过指定其初始化参数完成不同大小的偏移创建，但是这里的处理方式还是将一个完整视频从映射到球面上的方式，即不管怎么改变参数，创建出来的总是有4条曲边的球面块：</p>
<p></p>
<p>并不能实现每个分块以特定的映射逻辑将其不重不漏的铺到球面上的功能。</p>
<p>不过就算可以实现这样的功能，因为1个图层与1个视频块相绑定，在实际创建中发现：</p>
<ul>
<li>
<p>在一个<code>xrSession</code>中最多只能创建16个图层，并不能与<code>MxN</code>的分块逻辑相对应；</p>
</li>
<li>
<p>创建16个图层之后整个<code>xrSession</code>会变得异常卡顿，视频已无法正常播放；</p>
</li>
</ul>
<p>那么是否可以先将多个分块的视频从空间上拼接好，将最终拼接好的视频进行等距长方投影？</p>
<p>首先从实际的实现上没法完成，因为每个视频在h5中本质是<code>&lt;video&gt;</code>元素，多个<code>&lt;video&gt;</code>元素并不能在<code>DOM</code>的基础上实现空间的复原，就算有办法做到，最后在与<code>layer</code>绑定时也必须是1个<code>&lt;video&gt;</code>元素而这1个<code>&lt;video&gt;</code>元素还需要实现各个部分的自适应码率变化，这完全是不可行的。</p>
<p>测试的代码地址：<a href="https://github.com/ayamir/tiled-vr-dash-platform/blob/main/client/eqrt-media-demo/media-layer-sample.html" target="_blank" rel="noopener noreffer">media-layer-sample</a></p>
<p>进一步的解决办法是存在的：</p>
<p>因为目前的<code>WebXR</code>不能够满足需求，所以需要深入<code>WebGL</code>的层面，手动设计一套将各个分块以等距长方投影的方式映射到球面上的逻辑，同时还要与<code>WebXR</code>上层的处理API相对应，任务工作量和难度还需要进一步评估。</p>
]]></description>
</item>
</channel>
</rss>
