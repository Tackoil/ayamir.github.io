<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>MM - 分类 - Ayamir&#39;s Blog</title>
        <link>https://ayamir.github.io/categories/mm/</link>
        <description>MM - 分类 - Ayamir&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miracle_l@bupt.edu.cn (Ayamir)</managingEditor>
            <webMaster>miracle_l@bupt.edu.cn (Ayamir)</webMaster><lastBuildDate>Thu, 15 Sep 2022 20:48:51 &#43;0800</lastBuildDate><atom:link href="https://ayamir.github.io/categories/mm/" rel="self" type="application/rss+xml" /><item>
    <title>Note for WebRTC (1): Video Adaptation</title>
    <link>https://ayamir.github.io/posts/note-for-webrtc-1/</link>
    <pubDate>Thu, 15 Sep 2022 20:48:51 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/note-for-webrtc-1/</guid>
    <description><![CDATA[<h1 id="概况">概况</h1>
<p><code>WebRTC</code>提供了视频自适应机制，其目的主要是通过降低编码的视频的质量来减少带宽和 CPU 消耗。</p>
<p>视频自适应发生的情形：带宽或 CPU 资源发出信号表明自己未被充分使用或被过度使用时，进行视频自适应。过度使用则降低质量，否则提高质量。</p>
<p>视频自适应调整的对象：帧率与分辨率。</p>
<h1 id="资源">资源</h1>
<p><code>Resources</code>监测指标来自于系统或视频流。例如，一个资源可以监测系统温度或者视频流的带宽使用率。</p>
<p>资源实现了<code>Resource</code>接口：</p>
<ul>
<li>当资源检测到被过度使用则调用<code>SetUsageState(kOveruse)</code>；</li>
<li>当资源不再被过度使用则调用<code>SetUsageState(kUnderuse)</code>。</li>
</ul>
<p>对所有的视频而言，默认有两种类型的资源：</p>
<ul>
<li>质量标量资源</li>
<li>编码过度使用资源</li>
</ul>
<h2 id="qp-标量资源">QP 标量资源</h2>
<p>质量标量资源监测发送视频流中编码之后的帧的量化参数（QP），确保视频流的对于当前的分辨率而言可以接受。</p>
<p>每一帧被编码之后，<code>QualityScaler</code>就能获得相应的 QP。</p>
<p>过度使用或者未被充分使用的信号在平均 QP 脱离 QP 阈值之后发出。</p>
<p>QP 阈值在<code>EncoderInfo</code>中的<code>scaling_settings</code>属性中设置。</p>
<p>需要注意的是 QP 标量只在降级偏好设置为<code>MAINTAIN_FRAMERATE</code>或<code>BALANCED</code>时启用。</p>
<h2 id="编码使用资源">编码使用资源</h2>
<p>编码使用资源监测编码器需要花多长时间来编码一个视频帧，实际上这是 CPU 使用率的代理度量指标。</p>
<p>当平均编码使用超过了设定的阈值，就会触发过度使用的信号。</p>
<h2 id="插入其他资源">插入其他资源</h2>
<p>自定义的资源可以通过<code>Call::AddAdaptationResource</code>方法插入。</p>
<h1 id="自适应">自适应</h1>
<p>资源发出过度使用或未充分使用的信号之后，会发送给<code>ResourceAdaptationProcessor</code>，其从<code>VideoStreamAdapter</code>中请求<code>Adaptation</code>提案。这个提案基于视频的降级偏好设置。</p>
<p><code>ResourceAdaptationProcessor</code>基于获得的提案来确定是否需要执行当前的<code>Adaptation</code>。</p>
<h2 id="降级偏好设置">降级偏好设置</h2>
<p>有 3 种设置，在<code>RtpParameters</code>的头文件中定义：</p>
<ul>
<li><code>MAINTAIN_FRAMERATE</code>: 自适应分辨率</li>
<li><code>MAINTAIN_RESOLUTION</code>: 自适应帧率</li>
<li><code>BALANCED</code>: 自适应帧率或分辨率</li>
</ul>
<p>降级偏好设置在<code>RtpParameters</code>中的<code>degradation_perference</code>属性中设置。</p>
<h1 id="videosinkwants和视频流自适应"><code>VideoSinkWants</code>和视频流自适应</h1>
<p>自适应完成之后就会通知视频流，视频流就会转换自适应为<code>VideoSinkWants</code>。</p>
<p>这些接收器需求向视频流表明：在其被送去编码之前需要施加一些限制。</p>
<p>对于自适应而言需要被设置的属性为：</p>
<ul>
<li><code>target_pixel_count</code>: 对于每个视频帧要求的像素点总数，为了保持原始的长宽比，实际的像素数应该接近这个值，而不一定要精确相等，</li>
<li><code>max_pixel_count</code>: 每个视频帧中像素点的最大数量，不能被超过。</li>
<li><code>max_framerate_fps</code>: 视频的最大帧率，超过这个阈值的帧将会被丢弃。</li>
</ul>
<p><code>VideoSinkWants</code>可以被任何视频源应用，或者根据需要可以直接使用其基类<code>AdaptationVideoTraceSource</code>来执行自适应。</p>
]]></description>
</item>
</channel>
</rss>
