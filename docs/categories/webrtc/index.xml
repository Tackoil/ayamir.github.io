<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>WebRTC - 分类 - Ayamir&#39;s Blog</title>
        <link>https://ayamir.github.io/categories/webrtc/</link>
        <description>WebRTC - 分类 - Ayamir&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miracle_l@bupt.edu.cn (Ayamir)</managingEditor>
            <webMaster>miracle_l@bupt.edu.cn (Ayamir)</webMaster><lastBuildDate>Thu, 15 Jun 2023 18:21:02 &#43;0800</lastBuildDate><atom:link href="https://ayamir.github.io/categories/webrtc/" rel="self" type="application/rss+xml" /><item>
    <title>远程桌面与WebRTC</title>
    <link>https://ayamir.github.io/posts/knowledge/webrtc/remote-desktop-with-webrtc/</link>
    <pubDate>Thu, 15 Jun 2023 18:21:02 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/knowledge/webrtc/remote-desktop-with-webrtc/</guid>
    <description><![CDATA[<h1 id="关于远程桌面">关于远程桌面</h1>
<p>远程桌面是一种将一台计算机的桌面控制权限交给网络上另一台计算机的技术，两台计算机之间建立连接之后，可以进行音视频以及控制信令的相互传输，从而实现远程控制的功能。</p>
<h1 id="远程桌面技术的实现">远程桌面技术的实现</h1>
<p>基于远程桌面要完成的任务目标，其需要实现以下两个核心功能：</p>
<ol>
<li>音视频的传输，即需要让控制机收到受控机的音频跟视频。</li>
<li>控制信令的传输，即鼠标键盘的控制信号等</li>
</ol>
<p>目前主流的远程桌面技术主要有2种：</p>
<ol>
<li>基于<a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing" target="_blank" rel="noopener noreffer">VNC(Virtual Network Computing)</a>的远程桌面技术</li>
<li>基于<a href="https://en.wikipedia.org/wiki/Remote_Desktop_Protocol" target="_blank" rel="noopener noreffer">RDP(Remote Desktop Protocol)</a>的远程桌面技术</li>
</ol>
<h2 id="vnc">VNC</h2>
<p>VNC使用远程帧缓冲协议即(RFB, Remote FrameBuffer)来远程控制另一台计算机，将控制机的键盘和鼠标事件传输到被控制机，同时将被控制机的屏幕图像传输到控制机。</p>
<p>基于其技术原理，VNC有以下优点：</p>
<ol>
<li>跨平台，可以在不同的操作系统上运行，VNC技术本身也有多个客户端和服务端的实现版本，如RealVNC、TightVNC、UltraVNC等</li>
<li>开源，VNC的源代码及其很多现代衍生品都是在GNU许可证之下发布的</li>
<li>轻量级，VNC的客户端和服务端都是非常轻量级的程序，可以在低配置的计算机上运行</li>
</ol>
<p>但因为VNC本身的设计时间很早，因此在2023年的今天暴露出了很多的时代局限性：</p>
<ol>
<li>因为其基于像素方块的传输原理，就算是采用部分更新传输的方式，在大量像素变化的情况下会消耗大量的带宽。特别是对于现在的高分屏，其传输的数据量会更大。</li>
<li>VNC在设计之初被用于局域网内使用，因此没有考虑太多的安全性，虽然密码并不以明文发送，但是如果从网络中嗅探出加密密钥和编码之后的密码，也可能成功破解出密码。</li>
</ol>
<h2 id="rdp">RDP</h2>
<p>RDP是<a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/understanding-remote-desktop-protocol" target="_blank" rel="noopener noreffer">微软提出的一种专有协议</a>，扩展了T-120系列协议标准，最早专用于Windows系统的终端和服务器之间的远程桌面连接，之后微软也实现了<a href="https://learn.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-mac" target="_blank" rel="noopener noreffer">RDP的MacOS客户端</a>，现在也有很多第三方的实现版本实现了其功能的子集，为GNU/Linux做了适配如<a href="https://github.com/neutrinolabs/xrdp" target="_blank" rel="noopener noreffer">xrdp</a>。因此，可以说RDP也一定程度上具有跨平台的性质。</p>
<p>相比于VNC，RDP的实现原理还是比较复杂的：</p>
<p></p>
<p>首先，RDP的最底层是TCP，TCP之上是各层的协议和服务。</p>
<ul>
<li>TPKT：是TCP之上的ISO传输服务，允许两个组交换TPDU（传输协议数据单元）或PDU（协议数据单元）的信息单元。</li>
<li>X.224：连接传输协议，主要用于RDP初始连接请求和响应。</li>
<li>T.125 MCS：多点通信服务，允许RDP通过多个通道进行通信和管理。</li>
</ul>
<p>RDP的工作原理是通过TPKT实现信息单元的交换，通过X.224建立连接，使用T.125 MCS打开两个通道来完成两个设备之间的来回数据传输。</p>
<p>RDP的特点功能比较丰富，比如：</p>
<ul>
<li>支持共享剪切板。</li>
<li>支持多个显示器。</li>
<li>支持虚拟化GPU。</li>
<li>支持32位彩色和64000个独立的数据传输通道。</li>
<li>通过RC4对称加密算法使用128位密钥对数据进行加密。</li>
<li>可以在使用远程计算机时参考本地计算机上的文件系统。</li>
<li>远程计算机的应用程序可以在本地计算机上运行。</li>
</ul>
<p>当然，事物都有两面性，RDP拥有这么多强大功能，也有一些难以避免的缺点：</p>
<ul>
<li>网络速度较慢时，远程连接容易出现延迟。</li>
<li>两台计算机在不同的网络上时，其配置过程相当复杂。</li>
<li>固定使用3389端口监听，可能成为攻击的目标。</li>
<li>RDP整体上还是受到微软控制，定制性比较差。</li>
</ul>
<h1 id="webrtc和远程桌面">WebRTC和远程桌面</h1>
<p>远程桌面的核心需求和WebRTC的核心功能完美契合。</p>
<ul>
<li>WebRTC基于ICE/STUN/TURN的NAT穿透方案可以很方便地解决不同网络情况下主机连接的问题，</li>
<li>WebRTC基于SRTP的传输方式天然提供了实时特征、端到端的加密的数据传输服务。</li>
<li>WebRTC针对各种网络情况做了音视频传输的大量优化，可以保证各种网络条件下的可用性。</li>
<li>WebRTC本身其实是Chromium浏览器的一部分，天然具备跨平台的性质。</li>
<li>WebRTC完全开源，定制性极强，不少公司都基于WebRTC来做自家的直播、云游戏业务。</li>
</ul>
<p>整体上来讲，WebRTC的优势使其很适合用于远程桌面业务，当然，目前市面上已经有App基于WebRTC实现了远程桌面的功能，比如<a href="https://en.wikipedia.org/wiki/Chrome_Remote_Desktop" target="_blank" rel="noopener noreffer">Chrome Remote Desktop</a>和<a href="https://www.todesk.com/" target="_blank" rel="noopener noreffer">ToDesk</a>。前者可以理解为是Google用自己WebRTC推出的远程桌面服务，体验了一下，整体上功能比较少，但是连接比较稳定，不过受GFW影响，这玩意在国内应该是处于没法用的状态；后者则是国产远程桌面软件，目前已经比较成熟，提供了企业版、个人版、专业版和游戏版四个版本，从其官网上提供的信息来看，应该是做出了一定成绩。</p>
<p>从技术上讲，基于WebRTC开发远程桌面应用相当合理，开源可控，还有谷歌背书，WebRTC本身在不停地与时俱进，作为上层应用开发的远程桌面也可以及时享受到WebRTC带来的改进。</p>
<p>从业务上讲，WebRTC本身具有的功能可以解决上面所说的VNC和RDP的诸多问题，不过就功能的丰富性而言，可能跟微软的RDP还差一些，但是WebRTC基于音视频的解决方案本身可以优化的上限还是挺高的，毕竟随着人们需求的上升，高分辨率、高帧率也会成为未来远程桌面应用必不可少的功能需求。</p>
<p>本篇博客从非技术层面探讨了远程桌面技术的当下两大主流技术，以及WebRTC应用于远程桌面业务下的可行性。下篇博客将从技术层面详细分析WebRTC与远程桌面业务的契合程度及可能的解决方案，就先从核心功能开始吧！</p>
]]></description>
</item>
</channel>
</rss>
