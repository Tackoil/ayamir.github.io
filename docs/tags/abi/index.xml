<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ABI - 标签 - Ayamir&#39;s Blog</title>
        <link>https://ayamir.github.io/tags/abi/</link>
        <description>ABI - 标签 - Ayamir&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>miracle_l@bupt.edu.cn (Ayamir)</managingEditor>
            <webMaster>miracle_l@bupt.edu.cn (Ayamir)</webMaster><lastBuildDate>Wed, 07 Feb 2024 12:51:01 &#43;0800</lastBuildDate><atom:link href="https://ayamir.github.io/tags/abi/" rel="self" type="application/rss+xml" /><item>
    <title>ABI是什么？</title>
    <link>https://ayamir.github.io/posts/knowledge/abi/</link>
    <pubDate>Wed, 07 Feb 2024 12:51:01 &#43;0800</pubDate><author>miracle_l@bupt.edu.cn (Ayamir)</author><guid>https://ayamir.github.io/posts/knowledge/abi/</guid>
    <description><![CDATA[<h2 id="abi-是什么">ABI 是什么？</h2>
<p>ABI: Application Binary Interface（应用<strong>二进制</strong>接口）。</p>
<p>其实就是针对 <strong>编译器</strong> 和 <strong>链接器</strong> 的<strong>二进制级别</strong>的一些规范和约束，主要规范的内容有：</p>
<ul>
<li>规定函数的调用顺序，也称为“调用约定”，规定了如何将“函数”转换成汇编代码。</li>
<li>规定库函数如何表示，主要对链接过程有指导作用。</li>
<li>规定可以使用什么类型的数据，这些数据如何对齐以及其他低级细节。</li>
<li>ABI还涉及到OS的内容，包括可执行文件的格式、虚拟地址空间布局等细节。</li>
</ul>
<h2 id="为什么会有-abi-">为什么会有 ABI ？</h2>
<p>原因其实很简单，硬件架构、OS、编译工具链以及编程语言的发展和逐层抽象让大部分程序员可以不太在意底层程序的执行过程，而只需要负责编写表明业务逻辑的源代码。大部分程序员不需要在意并不意味着这部分不存在，实际上，这部分内容是通向二进制文件执行的必经之路。</p>
<p>通过上面的分析可以知道， ABI 这个概念基本上是由<code>(硬件架构, OS, 编译工具链, 编程语言)</code>这个四元组决定的。</p>
<ul>
<li>架构兼容性：<code>amd64</code>架构和<code>arm64</code>架构对应的指令集不同，因而一个可执行文件要想在这两个架构上成功运行，就需要编译这两个架构的二进制文件（也就是交叉编译）。</li>
<li>OS兼容性：<code>windows(PE-COFF)</code>, <code>linux(ELF)</code>和<code>macos(MACH-O)</code>上规定的程序二进制文件格式不同，因而也需要为不同的OS编译不同的二进制文件。</li>
<li>编译工具链兼容性：这个我们平时遇到的比较多，常见原因是不同的编译器或不同的编译器版本的<strong>名字修饰</strong>规则不同，导致链接器在链接时找不到对应名字的库函数。</li>
<li>编程语言兼容性：C语言中的一些基本内容如不同类型数据在内存中存放的形式，寄存器的使用形式等，以及C++的众多特性：虚函数如何调用、虚表的内容和分布形式、template如何实例化等等，都是 ABI 所需要规定的内容。</li>
</ul>
<h2 id="abi-compatible-">ABI-Compatible ?</h2>
<p>ABI-compatible 允许编译好的目标代码可以无需修改或重新编译链接就能直接运行，而从上面举的例子就可以发现，ABI 兼容是一件很难做到的事情，光是架构和OS的不同就需要不同的目标文件了。</p>
<p>而编译工具链的兼容性容易做到吗？其实也不容易。目前主流的C++编译工具链有<code>gcc</code>, <code>llvm(clang)</code>和<code>msvc</code>，这三者之间对于名字修饰的规定都不同，因而一个用<code>clang</code>编译的库函数是无法被一个用<code>msvc</code>编译的<code>main</code>文件调用的。当然，这里指的是默认进行名字修饰的情况，如果使用<code>extern &quot;C&quot;</code>对函数进行修饰，从而要求编译器使用C语言的编译和链接规范进行处理就可以解决这个问题。</p>
<p>C++一直被诟病的原因之一就是二进制兼容性不好，对于小型项目而言使用同一种编译器进行编译可能可行，但是对于大型项目而言不太现实，库代码的提供者通常只是提供编译链接好的库，并不提供源代码，所以要想做到对于所有的编译器（的所有版本）都进行支持是一件困难且不太现实的事情。</p>
]]></description>
</item>
</channel>
</rss>
